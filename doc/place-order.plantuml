@startuml
skinparam style strictuml

actor Customer as customer order 0
boundary CustomerSystem as customer_controller order 2
participant AccountService as account_service order 2 
participant CustomerAccount as customer_account order 2 
participant OrderService as order_service order 3 
participant CookieService as cookie_service order 3 
participant IngredientStockService as ingredientstock_service order 3 
participant StoreService as store_service order 3
participant Order as order order 4 
participant OrderItem as order_item order 4 
participant OrderScheduler as order_scheduler order 5
participant Cook as cook order 6
participant PaymentService as payment_service order 7
participant Receipt as receipt order 8

actor "Time Api" as time_api order 10
actor "Payment API" as payment_api order 20

activate customer



opt login
  customer -> customer_controller++: login()

  customer_controller -> account_service++: getAccount()
  account_service --> customer_controller--: customerAccount 


end

customer -> customer_controller: createOrder()

customer_controller -> order_service++: startOrder()

order_service --> order**: new()
order_service --> customer_controller--: order
customer_controller --> cookie_service++: getCookies()
cookie_service --> customer_controller--: cookies


customer -> customer_controller: manageOrderContent()
customer_controller -> order_service++: addCookies()

loop for cookie in cookies
  order_service -> order++: addItem()
  order --> order_item**: new()
end
deactivate order
order_service --> customer_controller--: order
customer_controller -> ingredientstock_service: removeFromStock(order)

customer_controller -> store_service++: getStores()
store_service --> customer_controller--: stores


customer -> customer_controller: selectStore(store)

customer_controller -> order_service++: getAvailablePickupDates(store)



order_service -> order ++: setStore()
order_service -> order: getPreparationTime()
deactivate order
order_service -> order_scheduler++: getAvailableTimeSlots(preparationTime, store)
order_scheduler -> time_api++: getCurrentTime()
time_api --> order_scheduler--: currentTime
order_scheduler -> order_scheduler: filterCooksByStore(store)

loop for Cooks in filteredCooks
  order_scheduler -> cook: getAvailableTimeSlots()
end

order_scheduler --> order_service--: availableTimeSlots


order_service --> customer_controller--: availableTimeSlots

customer -> customer_controller : selectPickupDate()
customer_controller -> order_service ++: selectTimeSlot()
order_service -> order_scheduler++: assignCook()
order_scheduler -> cook : assignOrder()
deactivate order_scheduler

order_service -> order ++: setPickupDate()
customer_controller -> order_service: getPrice()
deactivate order
order_service -> order: getPrice()
order_service --> customer_controller--: price

opt not logged in
  opt login
    ref over customer, customer_controller: login
  end
  opt create account
    customer -> customer_controller: createAccount()

    customer_controller -> account_service++: addAccount()
    account_service --> customer_controller--: customerAccount 

    opt subscribeToLoyalty
      customer -> customer_controller: subscribeToLoyaltyProgram()
      customer_controller -> account_service: updateAccount()
      account_service -> customer_account: subscribeToLoyaltyProgram()
    end
  end
end

opt logged in
  customer_controller -> customer_account ++: hasDiscount()
  customer_account --> customer_controller --: discount
  opt discount 
    customer_controller -> payment_service: addDiscount()
  end
end
deactivate customer_controller


customer -> customer_controller++: makePayment()
customer_controller -> order_service++: makePayment()
order_service -> payment_service++: makePayment()
payment_service -> payment_api++: makePayment()
payment_api --> payment_service--: paymentData
payment_service --> receipt**: new()
payment_service --> order_service --: receipt
order_service --> customer_controller --: receipt

opt logged in
  customer_controller -> account_service: updateAccount()
  account_service -> customer_account : updateLoyaltyPoints()
end


@enduml
